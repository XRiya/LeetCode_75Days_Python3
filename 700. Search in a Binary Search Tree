from typing import Optional

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        # Base case: if the root is null or the value is found
        if not root or root.val == val:
            return root

        # If the value is less than the root's value, search in the left subtree
        if val < root.val:
            return self.searchBST(root.left, val)

        # If the value is greater than the root's value, search in the right subtree
        return self.searchBST(root.right, val)
