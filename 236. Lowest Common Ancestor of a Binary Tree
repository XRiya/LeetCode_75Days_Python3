# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        # Base case: if the current node is None or matches either p or q, return the node
        if not root or root.val == p.val or root.val == q.val:
            return root

        # Recursively search for the LCA in the left and right subtrees
        left_lca = self.lowestCommonAncestor(root.left, p, q)
        right_lca = self.lowestCommonAncestor(root.right, p, q)

        # If both nodes are found in different subtrees, then the current node is the LCA
        if left_lca and right_lca:
            return root

        # If one of the nodes is found, return that node as a potential LCA
        return left_lca if left_lca else right_lca
